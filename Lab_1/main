#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <chrono>
#include <random>
#include <functional>
#include <exception>

std::mutex mu;
std::condition_variable cv;
bool ready = 0;

void produce() {
	std::unique_lock<std::mutex> ul(mu, std::defer_lock);
	ul.lock();
	if (!ready) {
		std::cout << "produced\n";
		ready = 1;
		cv.notify_one();
	}
	else {
		std::cout << "production not possible\n";
	}
	ul.unlock();
}

void consume() {
	std::unique_lock<std::mutex> ul(mu, std::defer_lock);
	ul.lock();
	cv.wait(ul, [] { return ready; });
	std::cout << "consumed\n";
	ready = 0;
	ul.unlock();
}

std::random_device dev;
std::mt19937 rng(dev());
std::uniform_int_distribution<std::mt19937::result_type> dist(1, 100);

void do_in_loop(std::function<void()> fun) {
	for (int i = 0; i < 10; i++) {
		std::this_thread::sleep_for(
			std::chrono::duration<int, std::milli>(dist(rng)));
		fun();
	}
}

void main() {
	std::jthread producer(do_in_loop, std::function<void()> {produce});
	std::jthread consumer(do_in_loop, std::function<void()> {consume});
	std::this_thread::sleep_for(
		std::chrono::duration<int, std::ratio<1, 1>>(10));
	std::exit(0);
}
